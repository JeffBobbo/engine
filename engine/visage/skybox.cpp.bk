#include "skybox.h"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include "../object/camera.h"
#include "../util/shader.h"
#include "../meshmanager.h"
#include "../shadermanager.h"
#include "../texturemanager.h"

VisageSkybox::~VisageSkybox()
{
  if (textures[0])
    glDeleteTextures(6, textures);

  if (skybox_vbo)
    glDeleteBuffers(1, &skybox_vbo);
  if (skybox_ebo)
    glDeleteBuffers(1, &skybox_ebo);
  if (skybox_vao)
    glDeleteBuffers(1, &skybox_vao);

}

void VisageSkybox::draw()
{
  GLint oldCull;
  GLint oldDepth;
  glGetIntegerv(GL_CULL_FACE_MODE, &oldCull);
  glGetIntegerv(GL_DEPTH_FUNC, &oldDepth);
  glCullFace(GL_FRONT);
  glDepthFunc(GL_ALWAYS);

  //glBindVertexArray(skybox_vao);
  glActiveTexture(GL_TEXTURE0);

  const Mesh* mesh = MeshManager::getMesh("obj/cube.obj");
  glBindVertexArray(mesh->getVAO());

  for (int i = 0; i < 6; ++i)
  {
    glm::mat4 model = glm::translate(glm::mat4(1.0f), camera.getPosition());
    const Shader* shader = ShaderManager::getShader("skybox");
    shader->activate();
    shader->update();
    GLint uniModel = glGetUniformLocation(shader->handle(), "model");
    glUniformMatrix4fv(uniModel, 1, GL_FALSE, glm::value_ptr(model));
    glBindTexture(GL_TEXTURE_2D, textures[i]);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(i*6*sizeof(GLuint)));
  }

  glCullFace(oldCull);
  glDepthFunc(oldDepth);
}

void VisageSkybox::load(const std::string& name)
{
  glGenTextures(6, textures);
  std::string suffixes[] = {"ft", "bk", "rt", "lf", "up", "dn"};
  for (int i = 0; i < 6; ++i)
  {
    textures[i] = TextureManager::getTexture(std::string("img/skybox/" + name + "_" + suffixes[i] + ".png"));
  }

  const static float vertices[] = {
    // x, y, z, u, v, nx, ny, nz
    // front
    -50.0f,  50.0f, -50.0f, 0.0f, 1.0f,  0.0f,  0.0f, -1.0f,
     50.0f,  50.0f, -50.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0f,
     50.0f, -50.0f, -50.0f, 1.0f, 0.0f,  0.0f,  0.0f, -1.0f,
    -50.0f, -50.0f, -50.0f, 0.0f, 0.0f,  0.0f,  0.0f, -1.0f,
    // back
     50.0f, -50.0f,  50.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0f,
    -50.0f, -50.0f,  50.0f, 1.0f, 1.0f,  0.0f,  0.0f,  1.0f,
    -50.0f,  50.0f,  50.0f, 1.0f, 0.0f,  0.0f,  0.0f,  1.0f,
     50.0f,  50.0f,  50.0f, 0.0f, 0.0f,  0.0f,  0.0f,  1.0f,
    // left
    -50.0f, -50.0f,  50.0f, 0.0f, 1.0f, -1.0f,  0.0f,  0.0f,
    -50.0f, -50.0f, -50.0f, 1.0f, 1.0f, -1.0f,  0.0f,  0.0f,
    -50.0f,  50.0f, -50.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0f,
    -50.0f,  50.0f,  50.0f, 0.0f, 0.0f, -1.0f,  0.0f,  0.0f,
    // right
     50.0f, -50.0f,  50.0f, 1.0f, 1.0f,  1.0f,  0.0f,  0.0f,
     50.0f, -50.0f, -50.0f, 0.0f, 1.0f,  1.0f,  0.0f,  0.0f,
     50.0f,  50.0f, -50.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0f,
     50.0f,  50.0f,  50.0f, 1.0f, 0.0f,  1.0f,  0.0f,  0.0f,
    // up
    -50.0f,  50.0f, -50.0f, 0.0f, 1.0f,  0.0f, -1.0f,  0.0f,
     50.0f,  50.0f, -50.0f, 0.0f, 0.0f,  0.0f, -1.0f,  0.0f,
     50.0f,  50.0f,  50.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0f,
    -50.0f,  50.0f,  50.0f, 1.0f, 1.0f,  0.0f, -1.0f,  0.0f,
    // down
    -50.0f, -50.0f,  50.0f, 1.0f, 0.0f,  0.0f,  1.0f,  0.0f,
     50.0f, -50.0f,  50.0f, 1.0f, 1.0f,  0.0f,  1.0f,  0.0f,
     50.0f, -50.0f, -50.0f, 0.0f, 1.0f,  0.0f,  1.0f,  0.0f,
    -50.0f, -50.0f, -50.0f, 0.0f, 0.0f,  0.0f,  1.0f,  0.0f
  };

  const static GLuint elements[] = {
    // front
    0, 1, 2,
    2, 3, 0,
    // back
    4, 5, 6,
    6, 7, 4,
    // left
    8, 9, 10,
    10, 11, 8,
    // right
    12, 13, 14,
    14, 15, 12,
    // up
    16, 17, 18,
    18, 19, 16,
    // down
    20, 21, 22,
    22, 23, 20
  };

  glGenVertexArrays(1, &skybox_vao);
  glBindVertexArray(skybox_vao);

  glGenBuffers(1, &skybox_vbo);
  glBindBuffer(GL_ARRAY_BUFFER, skybox_vbo);
  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

  glGenBuffers(1, &skybox_ebo);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, skybox_ebo);
  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(elements), elements, GL_STATIC_DRAW);

  glEnableVertexAttribArray(0);
  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), 0);
  glEnableVertexAttribArray(1);
  glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float)));
  glEnableVertexAttribArray(2);
  glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(5*sizeof(float)));
  glBindVertexArray(0);
  glDisableVertexAttribArray(0);
  glDisableVertexAttribArray(1);
  glDisableVertexAttribArray(2);
}
